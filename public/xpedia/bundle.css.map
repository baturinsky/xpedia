{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Item.svelte",
    "..\\..\\CraftWeapon.svelte",
    "..\\..\\BaseServices.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { tick, afterUpdate } from \"svelte\";\n  import { rul } from \"./Ruleset\";\n  import { Link, Intro, LinksPage, Value, LinksList } from \"./Components\";\n  import Article from \"./Article.svelte\";\n\n  export let source;\n\n  let article = null;\n  let found = null;\n  let query = \"\";\n  let currentSection = null;\n  let activeOption;\n  let ignoreNextAutoscroll = false;\n  let id = \"\";\n  let searchDelayHandle = null;\n  let seeSide = true;\n  let hugeFont = false;\n  let allowHugeFont = false;\n  let showDropdown = false;\n  let showLanguagesDropdown = false;\n  let tooltip;\n\n  let isTouch = \"ontouchstart\" in window;\n\n\n  async function loadRules() {\n    await rul.load(source);\n  }\n\n  let rulesLoaded = loadRules();\n\n  function goTo(id) {\n    window.location.hash = \"##\" + id;\n  }\n\n  function checkHash() {    \n    showDropdown = showLanguagesDropdown = false;\n    let hash = decodeURI(document.location.hash);\n    if(hash.substr(0,2) != \"##\")\n      return;\n    id = hash.substr(2);\n\n    if (id == \"MAIN\") {\n      query = \"\";\n    }\n    if (id) {\n      let dd = id.indexOf(\"::\");\n      if (dd != -1) {\n        query = id.substr(dd + 2);\n        id = id.substr(0, dd);\n      }\n\n      if (id == \"SEARCH\") {\n        if (query.length >= 2)\n          found = rul.search.findArticles(query).map(a => a.id);\n        else found = 0;\n        article = null;\n      } else {\n        found = null;\n        if (!article || article.id != id) article = rul.article(id);\n      }\n\n      console.log(id);\n      console.log(article);\n    }\n\n    if (article) {\n      if (article.section && currentSection != article.section)\n        currentSection = article.section;\n    } else {\n      currentSection = null;\n    }\n\n    if (activeOption) {\n      activeOption.scrollIntoView({ behavior: \"auto\", block: \"center\" })\n    }\n\n  }\n\n  function nextArticle(delta) {\n    let nextArticle = rul.findNextArticle(article, delta);\n    if (nextArticle) {\n      goTo(nextArticle.id);\n    }\n  }\n\n  document.addEventListener(\"keydown\", event => {\n    const keyName = event.key;\n    if (keyName == \"ArrowRight\") nextArticle(1);\n    if (keyName == \"ArrowLeft\") nextArticle(-1);\n  });\n\n  function searchKeyUp(e) {\n    if (searchDelayHandle) clearTimeout(searchDelayHandle);\n\n    searchDelayHandle = setTimeout(\n      () => {\n        goTo(\"SEARCH::\" + e.target.value);\n        searchDelayHandle = null;\n      },\n      e.key == \"Enter\" ? 10 : 1000\n    );\n  }\n\n  function selectSection(id) {\n    currentSection = rul.sections[id];\n  }\n\n  window.onhashchange = checkHash;\n\n  rulesLoaded.then(checkHash);\n\n  $: {\n    console.info(article || \"no article\");\n    //document.documentElement.style.fontSize = hugeFont ? \"24pt\" : \"12pt\";\n  }\n\n  let sortArticles = false;\n\n  function dropdown(val = null) {\n    if (val === null) {\n      showDropdown = !showDropdown;\n    } else {\n      if (!isTouch) showDropdown = val;\n    }\n  }\n\n  $: sortedArticles = articles =>\n    sortArticles\n      ? articles.slice().sort((a, b) => (a.title > b.title ? 1 : -1))\n      : articles;\n\n  window.addEventListener(\"mousemove\", async e => {\n    if (tooltip) {\n      if (e.target.attributes.tooltip) {\n        let rect = e.target.getBoundingClientRect();\n        tooltip.style.left = rect.left + rect.width/2 + \"px\";\n        tooltip.style.top = rect.top + \"px\";\n        let t = e.target.attributes.tooltip.value;\n        toggleTooltip(t in rul.lang && !e.shiftKey ? rul.lang[t]:t.substr(4));\n      } else {\n        toggleTooltip(null)\n      }\n    }\n  });\n\n  function toggleTooltip(text) {\n    tooltip.innerHTML = text;\n    let classes = tooltip.classList;\n    if (text) {\n      classes.add(\"visible\");\n    } else {\n      classes.remove(\"visible\");\n    }\n  }\n\n\n</script>\n\n<style>\n  .centered {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    width: 100px;\n    height: 100px;\n    margin-top: -50px;\n    margin-left: -50px;\n    text-align: center;\n  }\n</style>\n\n<svelte:head>\n  {#if !article}\n    <title>XPedia</title>\n  {/if}\n</svelte:head>\n\n{#await rulesLoaded}\n  <div class=\"centered\">\n    {rul.str('Loading...')}\n    <hr />\n    <img alt={rul.str('Loading...')} src=\"xpedia/spinner.svg\" />\n  </div>\n{:then}\n  <nav class=\"navbar flex-horisontal\">\n\n    <div\n      class=\"navbar-dropdown-container\"\n      on:mouseover={e => dropdown(true)}\n      on:mouseout={e => dropdown(false)}>\n      <div class=\"navbar-button\" on:mousedown={e => dropdown()}>\n        <img src=\"xpedia/favicon.png\" alt=\"XPedia\" class=\"xpedia-icon\" />\n        <nobr>\n          <span class=\"on-wide\">{rul.str('BootyPedia')}&nbsp;</span>\n          <span style=\"transform:scale(1.5,0.75); display:inline-block;\">\n            v\n          </span>\n          &nbsp;\n        </nobr>\n      </div>\n\n      <div\n        class=\"navbar-dropdown\"\n        style={showDropdown ? 'visibility:visible' : 'visibility:hidden'}>\n        <div class=\"flex-horisontal\" style=\"flex-wrap:nowrap\">\n          <div class=\"navbar-auto navbar-list\">\n            <a href=\"##MAIN\" style=\"text-decoration:underline;\">\n              {rul.str('HOME')}\n            </a>\n            <div style=\"height:0.5em;\" />\n            {#each rul.typeSectionsOrder as section, i}\n              <a href={'##' + section.id}>{section.title}</a>\n            {/each}\n          </div>\n          <div class=\"navbar-custom navbar-list\">\n            {#each rul.sectionsOrder as section, i}\n              <a href={'##' + section.id}>{section.title}</a>\n            {/each}\n          </div>\n        </div>\n      </div>\n\n    </div>\n\n    <a\n      class=\"navbar-button navbar-current-article\"\n      href={'##' + (currentSection ? currentSection.id : 'MAIN')}>\n      {currentSection ? currentSection.title : ''}\n    </a>\n\n    <div class=\"stretcher\" />\n\n    {#if rul.config && rul.config.languages && rul.config.languages.length > 1}\n      <div\n        class=\"navbar-dropdown-container\"\n        on:mouseover={e => !isTouch && (showLanguagesDropdown = true)}\n        on:mouseout={e => !isTouch && (showLanguagesDropdown = false)}>\n        <div\n          class=\"navbar-button\"\n          on:mousedown={e => (showLanguagesDropdown = !showLanguagesDropdown)}>\n          <big>Aあ</big>\n        </div>\n        <div\n          class=\"navbar-dropdown\"\n          style={showLanguagesDropdown ? 'visibility:visible' : 'visibility:hidden'}>\n          {#each rul.config.languages as lang}\n            <a href=\"{lang.save_as}##{id}\">{lang.name}</a>\n          {/each}\n        </div>\n      </div>\n    {/if}\n\n    {#if allowHugeFont}\n      <button class=\"navbar-button\" on:click={e => (hugeFont = !hugeFont)}>\n        <span style=\"font-size:150%\">A</span>\n        <span style=\"font-size:75%\">A</span>\n      </button>\n    {/if}\n\n    <div class=\"navbar-search\">\n      <input\n        class=\"input\"\n        type=\"text\"\n        bind:value={query}\n        on:keyup={searchKeyUp}\n        placeholder={rul.str('Search...')} />\n    </div>\n\n  </nav>\n\n  {#if seeSide}\n    <nav class=\"sidebar\">\n\n      <button\n        class=\"side-sort-button\"\n        style={sortArticles ? '' : 'text-decoration:line-through'}\n        on:click={e => (sortArticles = !sortArticles)}>\n        {rul.str('A-Z')}\n      </button>\n\n      {#each article && article.section && article.section.isType() ? rul.typeSectionsOrder : rul.sectionsOrder as section}\n        {#if !currentSection || section.id == currentSection.id}\n          <p class=\"menu-label\">{section.title}</p>\n          <div class=\"menu-list\">\n            {#each sortedArticles(section.articles) as option}\n              {#if article && article.id == option.id}\n                <a\n                  href={'##' + option.id}\n                  bind:this={activeOption}\n                  class=\"active-article-option side-link\">\n                  {option.title}\n                </a>\n              {:else}\n                <a\n                  class=\"side-link\"\n                  href={'##' + option.id}\n                  on:click={() => (ignoreNextAutoscroll = true)}>\n                  {option.title}\n                </a>\n              {/if}\n            {/each}\n          </div>\n        {/if}\n      {/each}\n      <br />\n    </nav>\n  {/if}\n\n  <button\n    class=\"side-hide-button\"\n    on:click={e => {\n      if (e.button == 0) seeSide = !seeSide;\n    }}\n    style={seeSide ? '' : 'left:1em;'}>\n    <span style=\"font-size:150%\">≡</span>\n  </button>\n\n  <div class=\"main\" style={seeSide ? '' : 'padding-left:3rem;'}>\n\n    {#if article}\n      <Article\n        {article}\n        {query}\n        on:prev={e => nextArticle(-1)}\n        on:next={e => nextArticle(1)} />\n    {:else if query}\n      Searching \"\n      <em>{query}</em>\n      \":\n      <br />\n      {#if found && found.length > 0}\n        <LinksPage links={found} />\n      {:else if query.length < 2}\n        <i>Query too short</i>\n      {:else if searchDelayHandle}\n        ...\n      {:else}\n        <i>Nothing found</i>\n      {/if}\n    {:else if !query}\n      <!--\n      {#each rul.sectionsOrder.concat(rul.typeSectionsOrder) as section}\n        <h1><a href={'#' + section.id}>{section.title}</a></h1>\n        <LinksPage links={section.articles.map(a => a.id)} />\n      {/each}-->\n      <Intro />\n    {/if}\n  </div>\n\n  <div class=\"tooltip fadein\" bind:this={tooltip}>Tooltip</div>\n{/await}\n",
    "<script>\r\n  import { rul } from \"./Ruleset\";\r\n  import SpecialBonus from \"./SpecialBonus.svelte\";\r\n  import Link from \"./Link.svelte\";\r\n  import CanvasImage from \"./CanvasImage.svelte\";\r\n  import BaseServiceList from \"./BaseServiceList.svelte\";\r\n  import Value from \"./Value.svelte\";\r\n  import AlterList from \"./AlterList.svelte\";\r\n  import TableKey from \"./TableKey.svelte\";\r\n\r\n  export let item;\r\n  export let title = rul.str(\"Item\");\r\n  let attacks;\r\n\r\n  function soundsFrom(sounds) {\r\n    if (!sounds) return [];\r\n    if (!sounds.length) sounds = [sounds];\r\n    return sounds.map(s => rul.path + rul.sounds[s]).filter(s => s);\r\n  }\r\n\r\n  $: {\r\n    attacks = item.attacks().slice();\r\n\r\n    if (item.compatibleAmmo)\r\n      for (let ammoId of item.compatibleAmmo) {\r\n        let ammo = rul.items[ammoId];\r\n        let ammoAttack = ammo.attacks()[0];\r\n        attacks.push(ammoAttack);\r\n      }\r\n\r\n    console.info(attacks);\r\n  }\r\n\r\n  console.info(item);\r\n</script>\r\n\r\n<style>\r\n  .right-column {\r\n    vertical-align: top;\r\n  }\r\n  img {\r\n    max-width: 100%;\r\n  }\r\n  .ammo-img {\r\n    text-align: center;\r\n    vertical-align: middle;\r\n    padding: 0px 2px 0px 0px;\r\n  }\r\n</style>\r\n\r\n<tr class=\"table-header\">\r\n  <td colspan=\"2\">{title}</td>\r\n</tr>\r\n{#if (item.sprite && item.sprite != 'Resources/Blanks/Blank.png') || attacks.length > 0}\r\n  <tr>\r\n    <td colspan=\"2\" class=\"td-attacks-table\">\r\n      <div>\r\n        {#if attacks.length > 0}\r\n          <table class=\"attacks-table\">\r\n            <thead>\r\n              {#if item.battleType != 2}\r\n                <td>{rul.str('mode')}</td>\r\n                <td>{rul.str('accuracy')}</td>\r\n                <td>{rul.str('cost')}</td>\r\n              {/if}\r\n              <td>{rul.str('damage')}</td>\r\n            </thead>\r\n            {#each attacks as attack}\r\n              <tr>\r\n                {#if attack.mode == 'ammo'}\r\n                  <td class=\"ammo-img\">\r\n                    <CanvasImage\r\n                      src={rul.sprite(attack.item.sprite)}\r\n                      maxWidth={32 * attack.item.invWidth}\r\n                      maxHeight={32 * attack.item.invHeight}\r\n                      zoom=\"2\" />\r\n                    <!--<img class=\"sprite\" use:ammoSprite style=\"position:relative;\" alt=\"X\" src={rul.sprite(attack.item.sprite)}/>-->\r\n                  </td>\r\n                  <td colspan=\"2\">\r\n                    <Link href={attack.item.type} />\r\n                    <br />\r\n                    <small>\r\n                      {rul.str('Shots')}: {attack.item.clipSize}\r\n                      {rul.str('Wgt')}: {attack.item.weight}\r\n                    </small>\r\n                  </td>\r\n                {:else}\r\n                  <td>\r\n                    {rul.str(attack.name)}{attack.shots == 1 ? '' : '×' + attack.shots}\r\n                  </td>\r\n                  <td>\r\n                    <nobr>\r\n                      <span>\r\n                        <em class=\"big-number\">{attack.accuracy}</em>\r\n                        {'%'}\r\n                      </span>\r\n\r\n                      <span>\r\n                        {#if attack.range}\r\n                          {@html rul\r\n                            .str('at N m')\r\n                            .replace('N', `<em>${attack.range}</em>`)}\r\n                        {/if}\r\n                      </span>\r\n\r\n                      <div>\r\n                        <SpecialBonus bonus={attack.accuracyMultiplier} />\r\n                      </div>\r\n                    </nobr>\r\n                  </td>\r\n                  <td>\r\n                    <nobr>\r\n                      <em>{attack.cost.time}</em>\r\n                      {attack.flatTime ? '' : '%'}\r\n                      <small>{rul.str('TU')}</small>\r\n                    </nobr>\r\n                    {#each Object.keys(attack.cost) as res}\r\n                      {#if res != 'time' && attack.cost[res] != 0}\r\n                        <br />\r\n                        <nobr>\r\n                          <Value val={attack.cost[res]} />\r\n                          <small>{rul.str(res)}</small>\r\n                        </nobr>\r\n                      {/if}\r\n                    {/each}\r\n                  </td>\r\n                {/if}\r\n                <td>\r\n                  {#if 'damage' in attack || 'damageType' in attack}\r\n                    <nobr>\r\n                      {attack.pellets > 1 && attack.damageBonus ? '(' : ''}\r\n                      <em>{attack.damage || 0}</em>\r\n                      <small>\r\n                        <SpecialBonus plus={true} bonus={attack.damageBonus} />\r\n                        {attack.pellets > 1 && attack.damageBonus ? ')' : ''}\r\n                      </small>\r\n                      {attack.pellets > 1 ? ' ×' + attack.pellets : ''}\r\n                    </nobr>\r\n                    <br />\r\n                    {#if attack.damageType}\r\n                      <Link href={rul.damageTypes[attack.damageType]} />\r\n                    {/if}\r\n                  {/if}\r\n                </td>\r\n              </tr>\r\n\r\n              {#if attack.mode == 'ammo' && attack.alter}\r\n                <AlterList items={attack.alter} />\r\n              {/if}\r\n            {/each}\r\n            {#if item.damageAlter && item.battleType != 2}\r\n              <AlterList items={item.damageAlter} />\r\n            {/if}\r\n          </table>\r\n        {/if}\r\n      </div>\r\n    </td>\r\n  </tr>\r\n{/if}\r\n\r\n{#each Object.entries(item).sort((a, b) =>\r\n  a[0] > b[0] ? 1 : -1\r\n) as [key, prop]}\r\n  {#if !['sprite', 'type', '_attacks', 'damageAlter'].includes(key)}\r\n    <tr>\r\n      <TableKey {key} />\r\n      <td class=\"right-column\">\r\n        {#if ['requiresBuyBaseFunc'].includes(key)}\r\n          <BaseServiceList items={prop} vertical={true} />\r\n        {:else if ['manufacture', 'componentOf'].includes(key)}\r\n          <table class=\"number-table\">\r\n            {#each Object.keys(prop) as field, i}\r\n              <tr>\r\n                <td>\r\n                  <em>{prop[field]}</em>\r\n                </td>\r\n                <td>\r\n                  <Link href={field} />\r\n                </td>\r\n              </tr>\r\n            {/each}\r\n          </table>\r\n        {:else if ['damageBonus', 'meleeBonus', 'accuracyMultiplier', 'meleeMultiplier', 'closeQuartersMultiplier'].includes(key)}\r\n          <SpecialBonus bonus={prop} />\r\n        {:else if ['damageType', 'meleeType'].includes(key)}\r\n          {rul.damageTypeName(prop)}\r\n        {:else if key == 'battleType'}\r\n          {prop}: {rul.str(rul.battleTypes[prop])}\r\n        {:else if key.includes('Sound')}\r\n          {#each soundsFrom(prop) as sound, i}\r\n            {@html i > 0 ? '<br/>' : ''}\r\n            <audio controls src={sound}>Audio tag not working</audio>\r\n          {/each}\r\n        {:else if ['floorSprite', 'handSprite'].includes(key)}\r\n          <a style=\"vertical-align:top\" href={rul.specialSprite(key, prop)}>\r\n            {prop}\r\n          </a>\r\n          <img class=\"sprite\" alt={prop} src={rul.specialSprite(key, prop)} />\r\n        {:else}\r\n          <Value val={prop} />\r\n        {/if}\r\n      </td>\r\n    </tr>\r\n  {/if}\r\n{/each}\r\n",
    "<script>\r\n  import { rul } from \"./Ruleset\";\r\n  import { Link, LinksPage, Value } from \"./Components\";  \r\n  import Item from \"./Item.svelte\"\r\n\r\n  export let weapon;\r\n\r\n  $: {\r\n    console.log(weapon);\r\n  }\r\n</script>\r\n\r\n<style>\r\n.panels3 td{\r\n  padding-right:10px;\r\n  vertical-align: top;\r\n}\r\n</style>\r\n\r\n<table class=\"panels3\">\r\n  <tr>\r\n    <td>\r\n      <table class=\"main-table\">\r\n        <tr>\r\n          <td colspan=\"2\" class=\"table-header\">Weapon</td>\r\n        </tr>\r\n        {#each Object.entries(weapon).sort((a, b) =>\r\n          a[0] > b[0] ? 1 : -1\r\n        ) as prop}\r\n          {#if !['type'].includes(prop[0])}\r\n            <tr>\r\n              <td class=\"padding-right\">\r\n                {@html rul.decamelize(prop[0])}\r\n              </td>\r\n              <td>\r\n                <Value val={prop[1]} />\r\n              </td>\r\n            </tr>\r\n          {/if}\r\n        {/each}\r\n      </table>\r\n    </td>\r\n    <td>\r\n    <table class=\"main-table\">\r\n    {#if weapon.launcher}\r\n      <Item item={rul.items[weapon.launcher]} title={\"Launcher: \" + rul.str(weapon.launcher)}/>\r\n    {/if}\r\n    {#if weapon.clip}\r\n      <Item item={rul.items[weapon.clip]} title={\"Clip: \" + rul.str(weapon.clip)}/>\r\n    {/if}\r\n    </table>\r\n    </td>\r\n  </tr>\r\n</table>\r\n",
    "<script>\r\n  import { rul } from \"./Ruleset\";\r\n  import { Link, LinksPage, Value, LinksList } from \"./Components\";\r\n\r\n  export let query = null\r\n\r\n  console.log(query);\r\n</script>\r\n\r\n<style>\r\n.highlight td{\r\n  background: #685C74;\r\n}\r\na{\r\n  color:cyan;\r\n}\r\n</style>\r\n\r\n<table class=\"main-table\">\r\n\r\n  {#each Object.entries(rul.baseServices) as service}\r\n    <tr class={service[0] == query?\"highlight\":\"\"}>\r\n      <td><a color=cyan href={'#' + service[0]}>{@html rul.str(service[0])}</a></td>\r\n      <td>\r\n        <LinksList items={service[1].providedBy} />\r\n      </td>\r\n    </tr>\r\n  {/each}\r\n\r\n</table>\r\n"
  ],
  "names": [],
  "mappings": "AAiKE,SAAS,eAAC,CAAC,AACT,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,KAAK,CAClB,UAAU,CAAE,MAAM,AACpB,CAAC;ACrID,aAAa,eAAC,CAAC,AACb,cAAc,CAAE,GAAG,AACrB,CAAC,AACD,GAAG,eAAC,CAAC,AACH,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,SAAS,eAAC,CAAC,AACT,UAAU,CAAE,MAAM,CAClB,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,AAC1B,CAAC;AClCH,sBAAQ,CAAC,gBAAE,CAAC,AACV,cAAc,IAAI,CAClB,cAAc,CAAE,GAAG,AACrB,CAAC;ACND,wBAAU,CAAC,gBAAE,CAAC,AACZ,UAAU,CAAE,OAAO,AACrB,CAAC,AACD,6BAAC,CAAC,AACA,MAAM,IAAI,AACZ,CAAC"
}